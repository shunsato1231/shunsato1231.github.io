<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rsses on 8ble.me</title>
    <link>/blog/index.xml</link>
    <description>Recent content in Blog-rsses on 8ble.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 13 Dec 2016 23:26:41 +0900</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>riot.js＋sass＋gulp で開発する</title>
      <link>/blog/2016/12/developed-width-riotjs/</link>
      <pubDate>Tue, 13 Dec 2016 23:26:41 +0900</pubDate>
      
      <guid>/blog/2016/12/developed-width-riotjs/</guid>
      <description>&lt;p&gt;最近riot.jsで開発する機会があったので，その時に作った環境について書きます．
&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;riot.jsで&lt;code&gt;require&lt;/code&gt;を使いたい&lt;/li&gt;
&lt;li&gt;cssはsassを使いたい(compassもつかいたい)&lt;/li&gt;
&lt;li&gt;テンプレートエンジンはjadeが良い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という条件で開発環境構築してみた．
解説詳しくないしメモ程度ですが参考にしてみてください．&lt;/p&gt;

&lt;h2 id=&#34;フォルダ構成&#34;&gt;フォルダ構成&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-:none&#34;&gt;frontend
   │
   ├ dest
   │  ├ css
   │  │   └ style.css
   │  ├ img
   │  ├ js
   │  ├ index.html
   │  └ main.bundle.js
   │
   ├ src
   │  ├ jade
   │  │　└ index.jade
   │  │
   │  ├ module (riotのタグを置くフォルダ)
   │  ├ scss
   │  │   └ module
   │  ├ js
   │  └ main.js
   │
   ├ gulpfile.js
   ├ config.rb
   └ package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じのフォルダ構成でいきます．&lt;/p&gt;

&lt;p&gt;compassを使おうとするといろいろ面倒くさそうだったので，cssはriotのタグと分離させることにしました．&lt;code&gt;src/module&lt;/code&gt;の中にriotのタグを入れて，それに合わせて&lt;code&gt;src/scss/module&lt;/code&gt;にスタイルを書いていくことにします．&lt;/p&gt;

&lt;h2 id=&#34;パッケージのインストール&#34;&gt;パッケージのインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-json:package.json&#34;&gt;{
  ~中略~

  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;browser-sync&amp;quot;: &amp;quot;^2.17.0&amp;quot;,
    &amp;quot;browserify&amp;quot;: &amp;quot;^13.1.0&amp;quot;,
    &amp;quot;gulp&amp;quot;: &amp;quot;~3.9.1&amp;quot;,
    &amp;quot;gulp-compass&amp;quot;: &amp;quot;~2.0.1&amp;quot;,
    &amp;quot;gulp-convert-encoding&amp;quot;: &amp;quot;^1.0.0&amp;quot;,
    &amp;quot;gulp-jade&amp;quot;: &amp;quot;^1.1.0&amp;quot;,
    &amp;quot;gulp-livereload&amp;quot;: &amp;quot;2.1.1&amp;quot;,
    &amp;quot;gulp-plumber&amp;quot;: &amp;quot;^1.1.0&amp;quot;,
    &amp;quot;gulp-riot&amp;quot;: &amp;quot;^0.5.5&amp;quot;,
    &amp;quot;gulp-watch&amp;quot;: &amp;quot;~1.1.0&amp;quot;,
    &amp;quot;riotify&amp;quot;: &amp;quot;^1.0.1&amp;quot;,
    &amp;quot;vinyl-source-stream&amp;quot;: &amp;quot;^1.1.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のパッケージをターミナルから&lt;code&gt;sudo npm install (パッケージ名) --dev-save&lt;/code&gt;で各々インストール．
(コピぺして &lt;code&gt;npm install&lt;/code&gt;でもいいけど，ひとつずつ最新版入れたほうが良いと思います)&lt;/p&gt;

&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-js:gulpfile.js&#34;&gt;&#39;use strict&#39;;

var gulp            = require(&#39;gulp&#39;);
var compass         = require(&#39;gulp-compass&#39;);
var livereload      = require(&#39;gulp-livereload&#39;);
var browserify      = require(&#39;browserify&#39;);
var riotify         = require(&#39;riotify&#39;);
var source          = require(&#39;vinyl-source-stream&#39;);
var browsersync     = require(&amp;quot;browser-sync&amp;quot;);
var jade            = require(&#39;gulp-jade&#39;);
var convertEncoding = require(&#39;gulp-convert-encoding&#39;);
var plumber         = require(&#39;gulp-plumber&#39;);


/*
 * Compass
 */
 gulp.task(&#39;compass&#39;, function(){
     gulp.src(&#39;./src/scss/**/*.scss&#39;)
     .pipe(plumber())
     .pipe(compass({
         config_file: &#39;config.rb&#39;,
         comments: false,
         css: &#39;./dest/css&#39;,
         sass: &#39;./src/scss&#39;
     }))
     .pipe(convertEncoding({to: &amp;quot;utf-8&amp;quot;}))
     .pipe(gulp.dest(&#39;./dest/css&#39;))
     .pipe(browsersync.stream());
 });

/*
 * jade
*/
gulp.task(&#39;jade&#39;, function ()  {
    return gulp.src([&#39;./src/jade/**/*.jade&#39;, &#39;!./src/jade/**/_*.jade&#39;])
        .pipe(plumber())
        .pipe(jade({
            pretty: true
        }))
        .pipe(convertEncoding({to: &amp;quot;utf-8&amp;quot;}))
        .pipe(gulp.dest(&#39;./dest/&#39;))
        .pipe(browsersync.stream());
});

/*
 * riot
 */
gulp.task(&#39;concat&#39;, function () {
  return browserify({entries: [&#39;./src/main.js&#39;]})
    .transform(riotify, { template: &#39;jade&#39; })
    .bundle()
    .on(&#39;error&#39;, function (err) {
      console.log(err.toString());
      this.emit(&#39;end&#39;);
    })
    .pipe(source(&#39;main.bundle.js&#39;))
    .pipe(convertEncoding({to: &amp;quot;utf-8&amp;quot;}))
    .pipe(gulp.dest(&#39;./dest/&#39;))
    .pipe(browsersync.stream());
});

/*
 * BrowserSync
 */
gulp.task(&#39;server&#39;, function () {
 browsersync.init({
   server: {
     baseDir: &#39;dest&#39;
   },
   open: false,
 });
});


/*
 * Watch
 */
gulp.task(&#39;default&#39;, [&#39;server&#39;], function() {
  gulp.watch(&amp;quot;./dest/*&amp;quot;, function() {
    browsersync.reload();
  });
  gulp.watch(&amp;quot;./src/**/*.js&amp;quot;, [&#39;concat&#39;]);
  gulp.watch(&amp;quot;./src/**/*.tag&amp;quot;, [&#39;concat&#39;]);
  gulp.watch(&amp;quot;./src/**/*.scss&amp;quot;, [&#39;compass&#39;]);
  gulp.watch(&amp;quot;./src/**/*.jade&amp;quot;, [&#39;jade&#39;]);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby:config.rb&#34;&gt;http_path = &amp;quot;/&amp;quot;
css_dir = &amp;quot;./dest/css&amp;quot;
sass_dir = &amp;quot;./src/scss&amp;quot;
output_style = :nested
line_comments = false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;require&lt;/code&gt;したいのでriotifyをつかいます．
これで&lt;code&gt;frontend&lt;/code&gt;フォルダで&lt;code&gt;gulp&lt;/code&gt;コマンドを起動すれば，自動でビルドしてくれます．&lt;/p&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;src/main.js&lt;/code&gt;でriotのタグをマウントするスクリプトを記述．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js:main.js&#34;&gt;var riot = require(&#39;riot&#39;);

//include tags
require(&#39;./module/tag1&#39;);
require(&#39;./module/tag1&#39;);

//mount
riot.mount(&#39;*&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは&lt;code&gt;src/jade/index.jade&lt;/code&gt;で&lt;code&gt;main.bundle.js&lt;/code&gt;を読み込み．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jade:main.jade&#34;&gt;doctype html
html(lang = &#39;ja&#39;)
	head
		meta(charset = &#39;utf-8&#39;)
		link(href = &amp;quot;css/style.css&amp;quot;  media = &amp;quot;all&amp;quot; rel = &amp;quot;stylesheet&amp;quot;)
	body
		tag1
		tag2
	script(src = &#39;./main.bundle.js&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最低限こんな感じでriotのタグをマウントすることができます．&lt;/p&gt;

&lt;h3 id=&#34;requireをつかう&#34;&gt;requireをつかう&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;src/js&lt;/code&gt;フォルダ内にこんなふうにスクリプトを置いて&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js:function1.js&#34;&gt;module.exports = function(data){
	//なんらかの処理
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;タグの中で&lt;code&gt;require&lt;/code&gt;すれば，自作の関数も&lt;code&gt;main.bandle.js&lt;/code&gt;に統合できます．&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-jade:src/module/tag1.tag&#34;&gt;tag1
	#contents
		hogehoge

	script.
		var function1 = require(&#39;../js/function1.js&#39;);
		function1(data);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;たいしたことなんもやってないけどgulp初めてだったからここまでやるのに時間かかった．
gulp-plumberつかってるけどjsファイルにエラーが起きるとgulpが落ちます．解決策が分かる人いたらコメント下さい．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>独自ドメインを取得しました</title>
      <link>/blog/2016/12/my-domain/</link>
      <pubDate>Tue, 13 Dec 2016 20:29:15 +0900</pubDate>
      
      <guid>/blog/2016/12/my-domain/</guid>
      <description>&lt;p&gt;&lt;em&gt;8ble.me&lt;/em&gt; で独自ドメイン取得しました!
&lt;/p&gt;

&lt;h2 id=&#34;以外とてこずった&#34;&gt;以外とてこずった&lt;/h2&gt;

&lt;p&gt;お名前.comでドメイン取得して，DNSにGehirn Infrastructure Serviceを使ってZone Apexで公開しています．
そんなに手間でもないし時間もかからないはずが凡ミスでかなり迷いまくって途方に暮れそうになったのでメモしておこう&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;お名前-comの設定画面わかりにくすぎるでしょ&#34;&gt;お名前.comの設定画面わかりにくすぎるでしょ&lt;/h3&gt;

&lt;p&gt;お名前.comはなんだか赤色画面でゴテゴテしたバナーがたくさんあってショッピングサイトみたい．しかも設定画面わかりにくすぎです．
外部のDNSを使う場合，ネームサーバの設定が完了したら，その後設定画面から設定の確認ができません．&lt;/p&gt;

&lt;p&gt;ちゃんとメールが来るけど設定できてるのかどうか不安になりました．見落としてるのかもしれないけど&amp;hellip;
にしてもわかりにくいです．&lt;/p&gt;

&lt;h3 id=&#34;gehirn側でも戸惑いまくった&#34;&gt;Gehirn側でも戸惑いまくった&lt;/h3&gt;

&lt;p&gt;Gehirnではログインにワンタイムパスワードが使われているのですが，これに関しても迷いまくって1時間くらいログインできなかった．
6桁の数字のパスワードなんですが，確認画面では3桁目と4桁目の間にスペースがあって，この &lt;strong&gt;スペースがログインできない原因&lt;/strong&gt; でした．
さすがにこれに気づかないで1時間迷うのはおマヌケだけど，これから使うひとはちゃんと詰めてください笑&lt;/p&gt;

&lt;p&gt;あと，Aレコードを設定する時，&lt;strong&gt;エイリアス先のアドレスの最後に &amp;ldquo; . &amp;rdquo; をつけるのを忘れたらだめ&lt;/strong&gt; です．勝手に補完されてしまいます．これに気づくのに1日を費やした．&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;というわけで無駄に苦労しましたが，なんとか独自ドメインで公開することができましたとさ．&lt;/p&gt;

&lt;h2 id=&#34;参考サイト&#34;&gt;参考サイト&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tanksuzuki.com/post/hugo-github-pages-2/&#34;&gt;GitHub Pagesでブログを作る#2 | TANKSUZUKI.COM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Hugo＋GitHub Pagesでブログ公開してみた</title>
      <link>/blog/2016/12/hello/</link>
      <pubDate>Mon, 12 Dec 2016 00:08:57 +0900</pubDate>
      
      <guid>/blog/2016/12/hello/</guid>
      <description>&lt;p&gt;自分のサイトと防備録的なものが欲しかったので，HugoとGitHub Pageをつかってブログを作りました．
&lt;/p&gt;

&lt;h2 id=&#34;hugoを選んだ理由&#34;&gt;Hugoを選んだ理由&lt;/h2&gt;

&lt;p&gt;始めはMiddleManを使ってみようと思ったのですが，どうもブログ向きじゃないのか思うようにいかず．
最近少しだけGO言語を触る機会があったのと，流行っているからという理由でHugoを使うことにしました．
あと，ビルドが早いと聞いたのでそれも決定的でした．&lt;/p&gt;

&lt;h2 id=&#34;このブログを公開するまでにやったこと&#34;&gt;このブログを公開するまでにやったこと&lt;/h2&gt;

&lt;h3 id=&#34;テーマ作成&#34;&gt;テーマ作成&lt;/h3&gt;

&lt;p&gt;gulpでhamlとsassを使ってテーマの元となるHTMLファイルとCSSファイルを生成．生成されたHTMLファイルをGo Templateに組み込んで作りました．hamlとかsassとかに対応していないのがちょっと面倒．あと，どうしても納得できない変なフォルダ構成になっているところがちらほら&amp;hellip;&lt;/p&gt;

&lt;p&gt;ドキュメントは英語しかありませんが，検索すると日本語の情報が結構出てくるので，そこまで苦労せずにできました．&lt;/p&gt;

&lt;h3 id=&#34;記事を書く&#34;&gt;記事を書く&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ローカル上で記事を書く．リアルタイムプレビューで確認．&lt;/li&gt;
&lt;li&gt;GitHubへ&lt;code&gt;$git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;公開される&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;たったこれだけです．Wordpressとかレンタルブログみたいに，ブラウザからログインして編集画面に行って&amp;hellip;という手間がないのですごく楽．大抵いままではテキストエディタに下書きしてから，ブラウザにコピペで記事を書いていたので手間が省けました．公開までもターミナルからすぐにできるので本当にお手軽です．mdでかけるのも魅力的．&lt;/p&gt;

&lt;p&gt;あと，ローカルサーバー起動＋ファイル更新で自動リロードしてくれるという，gulpのlivereloadみたいな機能が初めから付いています．
表示確認しながら記事を書けるのでとても重宝してます．&lt;/p&gt;

&lt;h2 id=&#34;これから追加したい機能&#34;&gt;これから追加したい機能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;記事公開したらTwitterとFaceBook更新する&lt;/li&gt;
&lt;li&gt;Worksページの作成&lt;/li&gt;
&lt;li&gt;更新し忘れて失効した8ble.netをとりかえしたい&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;という感じで，新しくブログを作った話でした．&lt;/p&gt;

&lt;p&gt;ブログというものをやるのが久々すぎて，文章書くのにすごい苦労しました&amp;hellip;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>